plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'application'
    id 'jacoco'
    id "com.diffplug.spotless"
    id "org.zaproxy.common"
}

apply from: "$rootDir/gradle/ci.gradle.kts"

java {
    def javaVersion = JavaVersion.VERSION_11
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
}

group 'org.zaproxy'
version '0.21.0-SNAPSHOT'

application {
    mainClass.set("org.zaproxy.zest.impl.CmdLine")
}

sourceSets.test.resources.srcDirs 'examples'

dependencies {
    implementation (
             'org.apache.httpcomponents:httpclient:4.5.8',
             'com.google.code.gson:gson:2.8.5',
             'org.seleniumhq.selenium:selenium-java:4.20.0',
             'org.seleniumhq.selenium:htmlunit3-driver:4.19.1',
             'net.htmlparser.jericho:jericho-html:3.1',
             'com.fasterxml.jackson.core:jackson-core:2.15.2',
             'com.fasterxml.jackson.core:jackson-databind:2.15.2',
             'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.2')

    testImplementation("com.github.tomakehurst:wiremock-jre8:2.35.0") {
        // Not needed.
        exclude(group: "org.junit")
    }
    testImplementation('org.mockito:mockito-core:5.8.0')
    testImplementation("org.assertj:assertj-core:3.24.2")
    testImplementation("org.junit.jupiter:junit-jupiter:5.10.1")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}

jar {
    manifest {
        attributes('Implementation-Version': archiveVersion.get(),
        'Main-Class': application.mainClass.get())
    }
}

test {
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    if (JavaVersion.current().getMajorVersion() >= "21") {
        options.compilerArgs = options.compilerArgs + "-Xlint:-this-escape"
    }
}

tasks.withType(Javadoc) {
    options {
        links = [ 'https://docs.oracle.com/javase/11/docs/api/' ]
        encoding = 'UTF-8'
        source = java.sourceCompatibility
    }
    if (JavaVersion.current().isJava8Compatible()) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

spotless {
    java {
        clearSteps()

        licenseHeaderFile "$projectDir/gradle/spotless/license.java"

        googleJavaFormat("1.17.0").aosp()
    }
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier.set("javadoc")
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier.set("sources")
}

publishing {
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl

            if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {
                credentials {
                    username = ossrhUsername
                    password = ossrhPassword
                }
            }
        }
    }

    publications {
        zest(MavenPublication) {
            from components.java

            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'ZAP Zest'
                packaging = 'jar'
                description = 'Zest is an experimental scripting language (initially) developed by the Mozilla security team designed to be used in web oriented security tools.'
                url = 'https://github.com/zaproxy/zest'

                organization {
                    name = 'ZAP'
                    url = 'https://www.zaproxy.org/'
                }

                mailingLists {
                    mailingList {
                        name = 'ZAP Zest Group'
                        post = 'zaproxy-zest@googlegroups.com'
                        archive = 'https://groups.google.com/group/zaproxy-zest'
                    }
                }

                scm {
                    url = 'https://github.com/zaproxy/zest'
                    connection = 'scm:git:https://github.com/zaproxy/zest.git'
                    developerConnection = 'scm:git:https://github.com/zaproxy/zest.git'
                }

                licenses {
                    license {
                        name = 'Mozilla Public License Version 2.0'
                        url = 'https://mozilla.org/MPL/2.0/'
                        distribution = 'repo'
                    }
                }

                developers {
                    developer {
                        id = 'psiinon'
                        name = 'Simon Bennetts'
                        email = 'psiinon@gmail.com'
                    }
                }
            }
        }
    }
}

signing {
    if (project.hasProperty('signing.keyId')) {
        sign publishing.publications.zest
    }
}
